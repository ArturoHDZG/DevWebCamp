{"version":3,"sources":["horarios.js","ponentes.js","tags.js"],"names":["document","querySelector","busqueda","categoria_id","dia","categoria","dias","querySelectorAll","inputHiddenDia","inputHiddenHora","terminoBusqueda","e","target","name","value","horaPrevia","classList","remove","Object","values","includes","async","url","resultado","fetch","eventos","listadoHoras","forEach","li","add","horasTomadas","map","evento","hora_id","listadoHorasArray","Array","from","filter","dataset","horaId","hora","addEventListener","seleccionarHora","obtenerHorasDisponibles","json","buscarEventos","ponentesInput","ponentes","ponentesFiltrados","listadoPonentes","respuesta","arrayPonentes","ponente","id","nombre","trim","apellido","formatearPonentes","obtenerPonentes","buscar","length","expRegular","RegExp","normalize","replace","toLowerCase","search","firstChild","removeChild","ponenteHTML","createElement","textContent","ponenteId","appendChild","noResultados","mostrarPonentes","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"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","file":"bundle.js","sourcesContent":["'use strict';\n\n(function () {\n  const horas = document.querySelector('#horas');\n\n  if (horas) {\n    let busqueda = {\n      categoria_id: '',\n      dia: ''\n    }\n\n    const categoria = document.querySelector('[name=\"categoria_id\"]');\n    const dias = document.querySelectorAll('[name=\"dia\"]');\n    const inputHiddenDia = document.querySelector('[name=\"dia_id\"]');\n    const inputHiddenHora = document.querySelector('[name=\"hora_id\"]');\n\n    categoria.addEventListener('change', terminoBusqueda);\n    dias.forEach(dia => dia.addEventListener('change', terminoBusqueda));\n\n    function terminoBusqueda(e) {\n      busqueda[ e.target.name ] = e.target.value;\n\n      // Reiniciar campos ocultos y el selector de horas\n      inputHiddenHora.value = '';\n      inputHiddenDia.value = '';\n      const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n\n      if (horaPrevia) {\n        horaPrevia.classList.remove('horas__hora--seleccionada');\n      }\n\n      if (Object.values(busqueda).includes('')) {\n        return;\n      }\n\n      buscarEventos();\n    }\n\n    async function buscarEventos() {\n      const { categoria_id, dia } = busqueda;\n      const url = `/api/eventos-horario?categoria_id=${categoria_id}&dia_id=${dia}`;\n      const resultado = await fetch(url);\n      const eventos = await resultado.json();\n\n      obtenerHorasDisponibles(eventos);\n    }\n\n    function obtenerHorasDisponibles(eventos) {\n      // Reiniciar las horas\n      const listadoHoras = document.querySelectorAll('#horas li');\n      listadoHoras.forEach(li => li.classList.add('horas__hora--deshabilitada'));\n\n      // Comprobar eventos ya tomados y deshabilitar ese horario\n      const horasTomadas = eventos.map(evento => evento.hora_id);\n      const listadoHorasArray = Array.from(listadoHoras);\n      const resultado = listadoHorasArray.filter(\n        li => !horasTomadas.includes(li.dataset.horaId)\n      );\n\n      resultado.forEach(li => li.classList.remove('horas__hora--deshabilitada'));\n\n      const horasDisponibles = document.querySelectorAll(\n        '#horas li:not(.horas__hora--deshabilitada)'\n      );\n      horasDisponibles.forEach(hora => hora.addEventListener('click', seleccionarHora));\n    }\n\n    function seleccionarHora(e) {\n      // Deshabilitar selección anterior\n      const horaPrevia = document.querySelector('.horas__hora--seleccionada');\n\n      if (horaPrevia) {\n        horaPrevia.classList.remove('horas__hora--seleccionada');\n      }\n\n      //Agregar clase a hora seleccionada\n      e.target.classList.add('horas__hora--seleccionada');\n      inputHiddenHora.value = e.target.dataset.horaId;\n\n      // Llenar el campo oculto del día seleccionado\n      inputHiddenDia.value = document.querySelector('[name=\"dia\"]:checked').value;\n    }\n  }\n})();\n","'use strict';\n\n(function () {\n  const ponentesInput = document.querySelector('#ponentes');\n\n  if (ponentesInput) {\n    let ponentes = [];\n    let ponentesFiltrados = [];\n    const listadoPonentes = document.querySelector('#listado-ponentes');\n\n    obtenerPonentes();\n\n    ponentesInput.addEventListener('input', buscarPonentes);\n\n    async function obtenerPonentes() {\n      const url = `/api/ponentes`;\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n\n      formatearPonentes(resultado);\n    }\n\n    function formatearPonentes(arrayPonentes = []) {\n      ponentes = arrayPonentes.map(ponente => {\n        return {\n          id: ponente.id,\n          nombre: `${ponente.nombre.trim()} ${ponente.apellido}`\n        }\n      });\n    }\n\n    function buscarPonentes(e) {\n      const buscar = e.target.value;\n\n      if (buscar.length >= 3) {\n        const expRegular = new RegExp(buscar.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\"), \"i\");\n\n        ponentesFiltrados = ponentes.filter(ponente => {\n\n          if (ponente.nombre.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase().search(expRegular) != -1) {\n            return ponente;\n          }\n        });\n      } else {\n        ponentesFiltrados = [];\n      }\n\n      mostrarPonentes();\n    }\n\n    function mostrarPonentes() {\n\n      while (listadoPonentes.firstChild) {\n        listadoPonentes.removeChild(listadoPonentes.firstChild);\n      }\n\n      if (ponentesFiltrados.length > 0) {\n\n        ponentesFiltrados.forEach(ponente => {\n          const ponenteHTML = document.createElement('LI');\n          ponenteHTML.classList.add('listado-ponentes__ponente');\n          ponenteHTML.textContent = ponente.nombre;\n          ponenteHTML.dataset.ponenteId = ponente.id;\n\n          // Añadir al DOM\n          listadoPonentes.appendChild(ponenteHTML);\n        });\n      } else {\n        const noResultados = document.createElement('P');\n\n        noResultados.classList.add('listado-ponentes__no-resultados');\n\n        if(ponentesInput.value.length >=3 ) {\n          noResultados.textContent = 'No hay resultados para tu búsqueda'\n        }\n\n        // Añadir al DOM\n        listadoPonentes.appendChild(noResultados);\n      }\n    }\n  }\n})();\n"," 'use strict';\n\n(function () {\n  const tagsInput = document.querySelector('#tags-input');\n\n  if (tagsInput) {\n    const tagsDiv = document.querySelector('#tags');\n    const tagsInputHidden = document.querySelector('[name=\"tags\"]');\n    let tags = [];\n\n    // Recuperar tags del input oculto para mostrar en vista de edición\n    if (tagsInputHidden.value !== '') {\n      tags = tagsInputHidden.value.split(',');\n      mostrarTags();\n    }\n\n    // Escuchar cambios en el input\n    tagsInput.addEventListener('keypress', guardarTag);\n\n    function guardarTag(e) {\n      if (e.keyCode === 44) {\n        if (e.target.value.trim() === '' || e.target.value < 1) {\n          return;\n        }\n\n        e.preventDefault();\n        tags = [ ...tags, e.target.value.trim() ];\n        tagsInput.value = '';\n\n        mostrarTags();\n      }\n    }\n\n    function mostrarTags() {\n      tagsDiv.textContent = '';\n      tags.forEach(tag => {\n        const etiqueta = document.createElement('LI');\n        etiqueta.classList.add('formulario__tag');\n        etiqueta.textContent = tag;\n        etiqueta.ondblclick = eliminarTag;\n        tagsDiv.appendChild(etiqueta);\n\n        actualizarInputHidden();\n      });\n    }\n\n    function eliminarTag(e) {\n      e.target.remove();\n      tags = tags.filter(tag => tag !== e.target.textContent);\n      actualizarInputHidden();\n    }\n\n    function actualizarInputHidden() {\n      tagsInputHidden.value = tags.toString();\n    }\n  }\n})();\n"]}